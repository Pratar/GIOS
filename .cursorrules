# CURSOR RULES - Систематизированные правила репозитория GIOS

## ЧАСТЬ I: КОНСТИТУЦИОННЫЕ ПРИНЦИПЫ (Constitutional Principles)
# РЕАЛИЗУЕТСЯ: GIOS: Goal-Integrated Operating System for Reasoning and Execution

### 1. ОСНОВНЫЕ ПРИНЦИПЫ (Core Pillars)

#### P-1: Когнитивная элегантность (Cognitive Elegance)
- Запрет использования слова "secret" в именах файлов
- Запрет изменения стандартных имен файлов и директорий
- Запрет создания избыточных или не относящихся к проекту файлов
- Использование только стандартных печатных знаков (без Unicode символов)

#### P-2: Дидактический приоритет (Didactic Primacy)
- Общение и документация только на русском языке
- Коммиты и комментарии в коде только на английском языке
- Обязательная проверка целенаправленности по source/_lmm/goal.tex
- Фокус на GIOS: Goal-Integrated Operating System for Reasoning and Execution как основном модуле репозитория

#### P-3: Масштабируемая формальность (Scalable Formality)
- Полное по строчному выполнение по МКК source/_lmm//mkk.tex
- Научный подход с позиций нейтрального исследователя
- Проверка эффективности и логичности по Комплексной Логике А.Зиновьева

#### P-4: Открытое ядро (Open-Ended Kernel)
- Изучение актуальной документации и лучших практик
- Использование решений с максимальным количеством звезд на GitHub
- Запрет установки чего-либо в систему

#### P-5: Модульная архитектура (Plug-in Layering)
- Создание документов только в /dev/shm для временных файлов c префиксом GIOS

#### P-6: Лексическая стратификация (Lexical Stratification)
- Четыре регистра: обычное имя, технический термин, формальный U-Type, математический символ
- Обязательное чтение всех документов от начала до конца

#### P-7: Прагматическая полезность (Pragmatic Utility)
- Обязательная проверка линтером и форматером перед коммитом
- ЗАПРЕТ локального тестирования на хост-системе
- Проверка целостности документации перед коммитом

#### P-8: Кросс-масштабная согласованность (Cross-Scale Consistency)
- Применение модели из source/gios-ieee.tex
- Использование TDD из source/_lmm/tdd.tex
- Следование принципам МКК из source/_lmm/mkk.tex

#### P-9: Явность состояния (State Explicitness)
- Все изменения фиксируются только после успешного прохождения тестов
- Устранение всех ошибок форматирования и линтинга
- Обязательная проверка целенаправленности по source/_lmm/goal.tex

#### P-10: Открытая эволюция (Open-Ended Evolution)
- Задача считается выполненной только при полном и безошибочном завершении
- Отчет о проделанной работе и результатах
- Использование актуальной документации и действующих рецептов

#### P-11: Соответствие современному состоянию (State-of-the-Art Alignment)
- Следование бестпрактикам
- Использование решений с максимальным количеством звезд на GitHub
- Изучение актуальной документации и лучших практик

#### P-12: Система документирования (Documentation System) - НОВЫЙ ПРИНЦИП
- Обязательное создание PRD (product.md) с планом работ и прогрессом
- Документирование всех параметров деплоя (ветки, env-переменные, серверы)
- Создание локальных changelog'ов по каждой папке проекта
- Автоматическая очистка временных файлов перед коммитом
- Актуализация правил в .cursorrules при изменении требований

## ЧАСТЬ II: СИСТЕМА КОНТРОЛЯ КАЧЕСТВА (Quality Control System)

### 2. ОБЯЗАТЕЛЬНЫЕ ПРОВЕРКИ (Mandatory Checks)
- Проверка по source/_lmm/goal.tex для целенаправленности
- Проверка актуальности документации перед коммитом
- Валидация структуры changelog'ов по папкам

### 3. ЗАПРЕТЫ И ОГРАНИЧЕНИЯ (Prohibitions and Constraints)
- Запрет упоминания методологий в комментариях и коде
- Запрет установки на хост-систему
- Запрет изменения имен файлов и директорий
- Запрет использования Unicode символов
- Запрет коммита без обновления changelog'ов
- Запрет оставления временных файлов в репозитории

## ЧАСТЬ III: МЕТОДОЛОГИЯ РАЗРАБОТКИ (Development Methodology)

### 4. TDD ПОДХОД (TDD Approach)
- Сначала написание тестов, потом кода
- Использование методики из source/_lmm/tdd.tex
- Полное тестирование без пропусков
- 100% покрытие функционала

### 5. ДОКУМЕНТООРИЕНТИРОВАННЫЙ ПОДХОД (Document-Oriented Approach)
- Изучение всех документов по строчно и по формульно
- Проверка по детальному описанию в source/_lmm/gios-ieee.tex
- Следование модели из source/_lmm/gios-ieee.tex
- Обязательное обновление product.md при изменении требований
- Автоматическое создание changelog'ов

## ЧАСТЬ IV: ТЕХНИЧЕСКАЯ АРХИТЕКТУРА (Technical Architecture)

### 6. ТЕХНИЧЕСКИЕ ТРЕБОВАНИЯ (Technical Requirements)
- Использование только стандартных печатных знаков (без Unicode символов)
- Запрет установки чего-либо в систему
- Создание документов только в /dev/shm для временных файлов с префиксом GIOS

### 7. СТРУКТУРА ПРОЕКТА (Project Structure)
- Временные файлы только в /dev/shm
- Нейтральные имена файлов без суффиксов
- Обязательная структура документации для S2 модуля:
  ```
  repository/
  ├── product.md              # PRD с планом работ и прогрессом
  ├── CHANGELOG.md            # Общий changelog проекта
  ├── source/_lmm/            # Техническая документация
  │   └── *.tex               # Спецификации
  └── [component]/            # Каждый компонент
      └── CHANGELOG.md        # Локальный changelog компонента
  ```

## ЧАСТЬ V: СИСТЕМА ЭВОЛЮЦИИ (Evolution System)

### 8. ПРИНЦИПЫ ИЗМЕНЕНИЙ (Change Principles)
- Научный подход с позиций нейтрального исследователя
- Обязательная проверка эффективности и логичности
- Следование принципам Комплексной Логики А.Зиновьева
- Обязательное документирование всех изменений в changelog'ах
- Автоматическая актуализация product.md при изменении статуса

### 9. КРИТЕРИИ ЗАВЕРШЕНИЯ (Completion Criteria)
- Устранение всех ошибок форматирования и линтинга
- Полный отчет о проделанной работе
- 100% актуальность документации
- Полное покрытие changelog'ами всех компонентов
- Проверка целенаправленности по source/_lmm/goal.tex

## ЧАСТЬ VI: ИНТЕГРАЦИЯ С МКК (MKK Integration)

### 10. РЕАЛИЗАЦИЯ ПРИНЦИПОВ МКК (MKK Principles Implementation)
- Формализация целей - проверка по source/_lmm/goal.tex
- Разрешение противоречий - научный подход и нейтральная позиция
- Рекурсивные метрики качества - постоянная проверка и тестирование
- Эволюция системы - открытое развитие с сохранением стабильности
- Формализация требований документирования через U-типы

## ЧАСТЬ VII: ПРИМЕНЕНИЕ GIOS

### 11. GIOS ПРИНЦИПЫ
- Операционная система для мышления
- Трансдисциплинарность как мета-теория мышления
- Физически обоснованная агрегация
- Единая модель доверия и эпистемической динамики

## ЧАСТЬ VIII: СИСТЕМА ДОКУМЕНТИРОВАНИЯ (Documentation System) - НОВАЯ ЧАСТЬ

### 13. ПРИНЦИПЫ ДОКУМЕНТИРОВАНИЯ (Documentation Principles)

#### P-D1: Полнота документации (Documentation Completeness)
- Каждый компонент системы должен иметь документацию
- Каждое изменение должно быть задокументировано в changelog
- Каждый этап проекта должен быть отражен в product.md

#### P-D2: Актуальность документации (Documentation Currency)
- Документация должна обновляться синхронно с кодом
- Устаревшая документация должна помечаться как deprecated
- Версионирование документации должно соответствовать версионированию кода

#### P-D3: Структурированность документации (Documentation Structure)
- Документация должна следовать единой структуре
- Каждый документ должен иметь четкую цель и аудиторию
- Связи между документами должны быть явными

#### P-D4: Автоматизация документирования (Documentation Automation)
- Changelog'и должны создаваться автоматически при изменениях
- Статус выполнения в product.md должен обновляться автоматически
- Проверка актуальности документации должна быть автоматизирована

### 14. ПРАВИЛА СОЗДАНИЯ И ОБНОВЛЕНИЯ ДОКУМЕНТОВ

#### R-D1: PRD (Product Requirements Document)
- **Файл:** product.md в корне проекта
- **Содержание:** Цели, требования, план работ, прогресс, критерии приемки
- **Обновление:** При изменении требований или статуса этапов
- **Формат:** Markdown с четкой структурой и отметками выполнения

#### R-D2: Документация деплоя (Deployment Documentation)
- **Файл:** DEPLOYMENT.md в корне проекта
- **Содержание:** Инфраструктура, ветки, env-переменные, серверы, процессы
- **Обновление:** При изменении инфраструктуры или процессов развертывания
- **Формат:** Markdown с примерами команд и конфигураций

#### R-D3: Changelog'и (Change Logs)
- **Общий файл:** CHANGELOG.md в корне проекта
- **Локальные файлы:** CHANGELOG.md в каждой папке компонента
- **Содержание:** История изменений с датами, авторами, описанием
- **Обновление:** При каждом изменении компонента
- **Формат:** Markdown с временными метками и категориями

#### R-D4: Техническая документация (Technical Documentation)
- **Расположение:** source/_lmm/ папка
- **Содержание:** Спецификации, API документация, архитектурные решения
- **Обновление:** При изменении технических аспектов
- **Формат:** Markdown, LaTeX, или специализированные форматы

### 15. ПРОЦЕСС ОБНОВЛЕНИЯ ДОКУМЕНТАЦИИ

#### Шаг 1: Анализ изменений
- Определить, какие компоненты затронуты изменениями
- Выявить, какая документация требует обновления
- Оценить влияние изменений на общий план проекта

#### Шаг 2: Обновление документации
- Обновить соответствующие changelog'и
- При необходимости обновить product.md
- Проверить актуальность связанных документов

#### Шаг 3: Валидация документации
- Проверить соответствие документации реальному состоянию
- Убедиться в корректности связей между документами
- Провести проверку на полноту и актуальность

#### Шаг 4: Фиксация изменений
- Закоммитить обновленную документацию
- Обновить статус в product.md
- Создать тег версии, если необходимо

### 16. ИНСТРУМЕНТЫ ДОКУМЕНТИРОВАНИЯ

#### Автоматизация:
- Скрипты для генерации changelog'ов
- Проверка актуальности документации
- Автоматическое обновление статуса в product.md

#### Валидация:
- Проверка структуры документации
- Валидация ссылок между документами
- Проверка соответствия форматов

#### Мониторинг:
- Отслеживание устаревшей документации
- Мониторинг покрытия документацией компонентов
- Анализ качества документации

## ЗАКЛЮЧЕНИЕ (Conclusion)

Данная систематизация обеспечивает однозначное понимание правил как единой методологической системы, основанной на принципах МКК, GIOS. Все правила взаимосвязаны и образуют целостную систему управления качеством, эволюцией и документированием проекта.

**НОВЫЕ ПРИНЦИПЫ ДОКУМЕНТИРОВАНИЯ:**
- P-12: Система документирования
- P-D1: Полнота документации
- P-D2: Актуальность документации
- P-D3: Структурированность документации
- P-D4: Автоматизация документирования

**ОБНОВЛЕННЫЕ ПРАВИЛА:**
- Обязательное создание и поддержание PRD
- Создание локальных changelog'ов по папкам
- Автоматическая очистка временных файлов
- Актуализация правил при изменении требований
- Исключение неактуальных требований по Python и фреймворкам
